{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data science project template","text":"<p>Template for a data science projects with software development tools</p> <p>Documentation: https://joserzapata.github.io/data-science-project-template/</p> <p>Source Code: https://github.com/JoseRZapata/data-science-project-template</p> <p>Table of Contents</p> <ul> <li>Data science project template</li> <li>\ud83d\uddc3\ufe0f Creating a New Project<ul> <li>Recommendations</li> </ul> </li> <li>\ud83d\udd17  Linking an Existing Project</li> <li>\ud83d\uddc3\ufe0f Project structure</li> <li>\u2728 Features and Tools<ul> <li>\ud83d\ude80 Project Standardization and Automation</li> <li>\ud83d\udd28 Developer Workflow Automation</li> <li>\ud83c\udf31 Conditionally Rendered Python Package or Project Boilerplate</li> <li>\ud83d\udd27 Maintainability</li> <li>\ud83c\udff7\ufe0f  Type Checking and Data Validation</li> <li>\u2705  Testing/Coverage</li> <li>\ud83d\udea8 Linting</li> <li>\ud83d\udc77 CI/CD</li> </ul> </li> <li>\ud83d\udd12 Security<ul> <li>\ud83d\udd0f Static Application Security Testing (SAST)</li> </ul> </li> <li>\ud83d\udccb Accessibility<ul> <li>\ud83d\udcdd Project Documentation</li> <li>\ud83d\uddc3\ufe0f Templates</li> </ul> </li> <li>References</li> </ul>"},{"location":"#creating-a-new-project","title":"\ud83d\uddc3\ufe0f Creating a New Project","text":""},{"location":"#recommendations","title":"Recommendations","text":"<p>It is highly recommended to use a python version manager like Pyenv and this project is set to use Poetry to manage the dependencies and the environment.</p> <ol> <li>Install Pyenv</li> <li>Install Poetry</li> </ol> <p>Via Cruft - recommended:</p> install cruft<pre><code>pip install --user cruft # Install `cruft` on your path for easy access\n</code></pre> create project<pre><code>cruft create https://github.com/JoseRZapata/data-science-project-template\n</code></pre> <p>Via Cookiecutter:</p> install cookiecutter<pre><code>pip install --user cookiecutter # Install `cookiecutter` on your path for easy access\n</code></pre> create project<pre><code>cookiecutter gh:JoseRZapata/data-science-project-template\n</code></pre> <p>Note: Cookiecutter uses <code>gh:</code> as short-hand for <code>https://github.com/</code></p>"},{"location":"#linking-an-existing-project","title":"\ud83d\udd17  Linking an Existing Project","text":"<p>If the project was originally installed via Cookiecutter, you must first use Cruft to link the project with the original template:</p> <pre><code>cruft link https://github.com/JoseRZapata/data-science-project-template\n</code></pre> <p>Then/else:</p> <pre><code>cruft update\n</code></pre>"},{"location":"#project-structure","title":"\ud83d\uddc3\ufe0f Project structure","text":"<p>Folder structure for data science projects  why?</p> <pre><code>.\n\u251c\u2500\u2500 codecov.yml                         # configuration for codecov\n\u251c\u2500\u2500 .code_quality\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bandit.yaml                     # bandit configuration\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mypy.ini                        # mypy configuration\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ruff.toml                       # ruff configuration\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_raw                          # raw immutable data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_intermediate                 # typed data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 03_primary                      # domain model data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 04_feature                      # model features\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 05_model_input                  # often called 'master tables'\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 06_models                       # serialized models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 07_model_output                 # data generated by model runs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 08_reporting                    # reports, results, etc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md                       # description of the data structure\n\u251c\u2500\u2500 docs                                # documentation for your project\n\u251c\u2500\u2500 .editorconfig                       # editor configuration\n\u251c\u2500\u2500 .github                             # github configuration\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 actions\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 python-poetry-env\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 action.yml              # github action to setup python environment\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependabot.md                   # github action to update dependencies\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pull_request_template.md        # template for pull requests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workflows\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 docs.yml                    # github action to build documentation (mkdocs)\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pre-commit_autoupdate.yml   # github action update pre-commit hooks\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test.yml\n\u251c\u2500\u2500 .gitignore                          # files to ignore in git\n\u251c\u2500\u2500 Makefile                            # useful commands to setup environment,\n\u251c\u2500\u2500 models                              # store final models\n\u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1-data                          # notebooks for data extraction and cleaning\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2-exploration                   # notebooks for data exploration\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 3-analysis                      # notebooks for data analysis\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 4-feat_eng                      # notebooks for feature engineering\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 5-models                        # notebooks for model training\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 6-evaluation                    # notebooks for model evaluation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7-deploy                        # notebooks for model deployment\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 notebook_template.ipynb         # template for notebooks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md                       # information about the notebooks\n\u251c\u2500\u2500 .pre-commit-config.yaml             # configuration for pre-commit hooks\n\u251c\u2500\u2500 pyproject.toml                      # dependencies for poetry\n\u251c\u2500\u2500 README.md                           # description of your project\n\u251c\u2500\u2500 src                                 # source code for use in this project\n\u251c\u2500\u2500 tests                               # test code for your project\n\u2514\u2500\u2500 .vscode                             # vscode configuration\n    \u251c\u2500\u2500 extensions.json                 # list of recommended extensions\n    \u2514\u2500\u2500 settings.json                   # vscode settings\n</code></pre>"},{"location":"#features-and-tools","title":"\u2728 Features and Tools","text":""},{"location":"#project-standardization-and-automation","title":"\ud83d\ude80 Project Standardization and Automation","text":""},{"location":"#developer-workflow-automation","title":"\ud83d\udd28 Developer Workflow Automation","text":"<ul> <li>Python packaging, dependency management and environment management   with Poetry - <code>why?</code></li> <li>Project workflow orchestration   with Make as an interface shim</li> <li>Self-documenting Makefile; just type       <code>make</code> on the command line to display auto-generated documentation on available       targets:</li> <li>Automated Cookiecutter template synchronization with Cruft - <code>why?</code></li> <li>Code quality tooling automation and management with pre-commit</li> <li>Continuous integration and deployment with GitHub Actions</li> <li>Project configuration files  with Hydra - <code>why?</code></li> </ul>"},{"location":"#conditionally-rendered-python-package-or-project-boilerplate","title":"\ud83c\udf31 Conditionally Rendered Python Package or Project Boilerplate","text":"<ul> <li>Optional: Jupyter support</li> </ul>"},{"location":"#maintainability","title":"\ud83d\udd27 Maintainability","text":""},{"location":"#type-checking-and-data-validation","title":"\ud83c\udff7\ufe0f  Type Checking and Data Validation","text":"<ul> <li>Static type-checking with Mypy</li> </ul>"},{"location":"#testingcoverage","title":"\u2705  Testing/Coverage","text":"<ul> <li>Testing   with Pytest</li> <li>Doctests   with xdoctest</li> <li>Code coverage   with Coverage.py</li> <li>Coverage reporting   with Codecov</li> </ul>"},{"location":"#linting","title":"\ud83d\udea8 Linting","text":"<ul> <li>Code quality:</li> <li>Ruff An extremely fast (10x-100x faster) Python linter and code formatter, written in Rust.<ul> <li>Replacement for Pylint, Flake8 (including major plugins) and more linters under a single, common interface</li> </ul> </li> <li>ShellCheck</li> <li>Code formatting:</li> <li> <p>Ruff An extremely fast (10x-100x faster) Python linter and code formatter, written in Rust.</p> <ul> <li>Replacement for Black, isort, pyupgrade and more formatters under a single, common interface</li> </ul> </li> <li> <p>General file formatting:</p> </li> <li><code>end-of-file-fixer</code></li> <li><code>pretty-format-json</code></li> <li>(trim) <code>trailing-whitespace</code></li> <li><code>check-yaml</code></li> <li>Unsanitary commits:</li> <li>Secrets     with <code>detect-secrets</code></li> <li>Large files     with <code>check-added-large-files</code></li> <li>Invalid Python files     with <code>check-ast</code></li> </ul>"},{"location":"#cicd","title":"\ud83d\udc77 CI/CD","text":"<ul> <li>Dependency updates   with Dependabot</li> <li>Automated Dependabot PR merging     with the Dependabot Auto Merge GitHub Action</li> </ul>"},{"location":"#security","title":"\ud83d\udd12 Security","text":""},{"location":"#static-application-security-testing-sast","title":"\ud83d\udd0f Static Application Security Testing (SAST)","text":"<ul> <li>Code vulnerabilities   with Bandit</li> </ul>"},{"location":"#accessibility","title":"\ud83d\udccb Accessibility","text":""},{"location":"#project-documentation","title":"\ud83d\udcdd Project Documentation","text":"<ul> <li>Documentation building   with MkDocs - Tutorial</li> <li>Powered by mkdocs-material</li> <li>Rich automatic documentation from type annotations and docstrings (NumPy, Google, etc.)     with mkdocstrings</li> </ul>"},{"location":"#templates","title":"\ud83d\uddc3\ufe0f Templates","text":"<ul> <li>Pull Request template</li> <li>Notebook template</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>https://drivendata.github.io/cookiecutter-data-science/</li> <li>https://github.com/crmne/cookiecutter-modern-datascience</li> <li>https://github.com/khuyentran1401/data-science-template</li> <li>https://github.com/woltapp/wolt-python-package-cookiecutter</li> <li>https://khuyentran1401.github.io/reproducible-data-science/structure_project/introduction.html</li> <li>https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd</li> <li>https://github.com/kedro-org/kedro-starters</li> </ul>"},{"location":"pre-commit/","title":"Pre-commit configuration","text":"<p>this project uses pre-commit to run checks on every commit.</p> <p>Configuration file: .pre-commit-config.yaml</p>"},{"location":"pre-commit/#pre-commitpre-commit-hooks","title":"pre-commit/pre-commit-hooks","text":"<p>This repository contains some out-of-the-box hooks provided by the pre-commit project.</p> <ul> <li><code>trailing-whitespace</code>: This hook trims trailing whitespace.</li> <li><code>end-of-file-fixer</code>: This hook ensures that a file is either empty, or ends with one newline.</li> <li><code>check-yaml</code>: This hook checks yaml files for parseable syntax.</li> <li><code>check-case-conflict</code>: This hook checks for files with names that would conflict on a case-insensitive filesystem like MacOS HFS+ or Windows FAT.</li> <li><code>debug-statements</code>: This hook checks for Python debug statements.</li> <li><code>detect-private-key</code>: This hook checks for the addition of private keys.</li> <li><code>check-merge-conflict</code>: This hook checks for files that contain merge conflict strings.</li> <li><code>check-ast</code>: This hook checks Python source files for syntactically valid ast.</li> <li><code>check-added-large-files</code>: This hook prevents adding large files. The max size is configurable.</li> </ul>"},{"location":"pre-commit/#astral-shruff-pre-commit","title":"astral-sh/ruff-pre-commit","text":"<p>This repository contains hooks for the Ruff programming language.</p> <ul> <li><code>ruff</code>: This hook runs the Ruff linter with the <code>--fix</code> option to automatically fix issues and a custom configuration file.</li> <li><code>ruff-format</code>: This hook runs the Ruff formatter.</li> </ul>"},{"location":"pre-commit/#pre-commitmirrors-mypy","title":"pre-commit/mirrors-mypy","text":"<p>This repository contains a mirror of mypy for pre-commit.</p> <ul> <li><code>mypy</code>: This hook runs mypy, a static type checker for Python, with a custom configuration file.</li> </ul>"},{"location":"pre-commit/#pycqabandit","title":"PyCQA/bandit","text":"<p>This repository contains Bandit, a tool designed to find common security issues in Python code.</p> <ul> <li><code>bandit</code>: This hook runs Bandit with a custom configuration file.</li> </ul>"},{"location":"pre-commit/#yelpdetect-secrets","title":"Yelp/detect-secrets","text":"<p>This repository contains a tool to detect secrets in the code base. yelp detect-secrets</p> <ul> <li><code>detect-secrets</code>: This hook runs detect-secrets, a tool to detect secrets in the code base.</li> <li><code>detect-secrets-jupyter</code>: This hook runs detect-secrets specifically for Jupyter notebooks.</li> </ul>"},{"location":"vscode/","title":"VSCode configuration settings","text":"<p>The following are some common settings that can be configured in Visual Studio Code to improve the Python development experience.</p> <p>https://github.com/JoseRZapata/data-science-project-template/.vscode/settings.json</p> <pre><code>{\n  \"[python]\": {\n\n    \"editor.codeActionsOnSave\": {\n      \"source.fixAll.ruff\": \"explicit\",\n      \"source.organizeImports.ruff\": \"explicit\",\n    },\n    \"editor.formatOnSave\": true,\n        \"editor.rulers\": [\n      100\n    ]\n  },\n  \"files.exclude\": {\n    \"**/__pycache__\": true\n  },\n  \"python.languageServer\": \"Pylance\",\n  \"editor.formatOnPaste\": true,\n  \"notebook.lineNumbers\": \"on\",\n  \"editor.inlineSuggest.enabled\": true,\n  \"editor.formatOnType\": true,\n  \"git.autofetch\": true,\n  \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n  \"python.terminal.activateEnvInCurrentTerminal\": true,\n}\n</code></pre> <ul> <li> <p><code>[python]</code>: This section applies settings specifically for Python files.</p> </li> <li> <p><code>\"editor.codeActionsOnSave\"</code>: Specifies actions to be performed when a Python file is saved.</p> </li> <li><code>\"source.fixAll.ruff\"</code>: \"explicit\": The Ruff auto-fix feature is set to explicit mode, meaning it will only fix issues when explicitly told to do so.</li> <li><code>\"source.organizeImports.ruff\": \"explicit\"</code>: The Ruff import organization feature is set to explicit mode, meaning it will only organize imports when explicitly told to do so.</li> <li><code>\"editor.formatOnSave\": true</code>: This setting enables automatic code formatting when a Python file is saved.</li> <li><code>\"editor.rulers\": [100]</code>: This setting adds a vertical ruler at the 100th character in the editor for Python files to guide line length.</li> <li> <p><code>\"files.exclude\": {\"**/__pycache__\": true}</code>: This setting hides all pycache directories in the file explorer.</p> </li> <li> <p><code>\"python.languageServer\": \"Pylance\"</code>: This setting specifies Pylance as the language server for Python. A language server provides features like auto-completion and syntax highlighting.</p> </li> <li> <p><code>\"editor.formatOnPaste\": true</code>: This setting enables automatic code formatting when you paste code into the editor.</p> </li> <li> <p><code>\"notebook.lineNumbers\": \"on\"</code>: This setting enables line numbers in Jupyter notebooks.</p> </li> <li> <p><code>\"editor.inlineSuggest.enabled\": true</code>: This setting enables inline suggestions, which show suggested completions as you type.</p> </li> <li> <p><code>\"editor.formatOnType\": true</code>: This setting enables automatic code formatting as you type.</p> </li> <li> <p><code>\"git.autofetch\": true</code>: This setting enables automatic fetching of Git data.</p> </li> <li> <p><code>\"editor.defaultFormatter\": \"charliermarsh.ruff\"</code>: This setting specifies Ruff as the default formatter for code in the editor.</p> </li> <li> <p><code>\"python.terminal.activateEnvInCurrentTerminal\": true</code>: This setting enables automatic activation of the Python environment in the current terminal.</p> </li> </ul>"},{"location":"github_actions/gh_action_pre-commit-autoupdate/","title":"GitHub Action:Pre-commit auto-update","text":"<p>This GitHub Action file configures a workflow named \"Pre-commit auto-update\". This workflow is responsible for automatically updating the pre-commit hooks in your repository.</p> <p>pre-commit_autoupdate.yml</p>"},{"location":"github_actions/gh_action_pre-commit-autoupdate/#workflow-details","title":"Workflow Details","text":"<ul> <li> <p><code>on</code>: This workflow is triggered in two situations:</p> </li> <li> <p><code>schedule</code>: It runs automatically every Monday at 7:00 UTC (according to the cron schedule <code>\"0 7 * * 1\"</code>).</p> </li> <li><code>workflow_dispatch</code>: This allows the workflow to be manually run from the GitHub user interface.</li> <li><code>jobs</code>: Defines a job named \"pre-commit-update\".</li> </ul>"},{"location":"github_actions/gh_action_pre-commit-autoupdate/#job-pre-commit-update-details","title":"Job \"pre-commit-update\" Details","text":"<p><code>runs-on</code>: This job runs on the latest version of Ubuntu.</p> <p><code>steps</code>: Defines the steps to be followed in this job.</p> <p><code>Checkout</code>: This step uses the actions/checkout@v3 action to get a copy of the repository.</p> <p><code>Update pre-commit hooks</code>: This step uses the <code>brokenpip3/action-pre-commit-update</code> action to update the pre-commit hooks. This action requires a GitHub token to function, which is passed through <code>github-token: ${{ secrets.PAT }}</code>. PAT is a secret stored in the repository settings that contains a personal access token with repository scope.</p> <p>In summary, this workflow takes care of keeping the pre-commit hooks in the repository up-to-date, running automatically every Monday and also allowing manual execution whenever necessary.</p>"}]}